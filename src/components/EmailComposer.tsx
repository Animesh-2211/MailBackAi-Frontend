import { useState } from "react";
import { Button } from "./ui/button";
import { Textarea } from "./ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import { Copy, RefreshCw } from "lucide-react";
import { toast } from "sonner";

const tones = [
  "Professional",
  "Friendly",
  "Formal",
  "Casual",
  "Enthusiastic",
  "Direct",
];

export const EmailComposer = () => {
  const [message, setMessage] = useState("");
  const [tone, setTone] = useState("Professional");
  const [generatedMessage, setGeneratedMessage] = useState("");

  const handleGenerate = () => {
    // Simulate API call
    setTimeout(() => {
      setGeneratedMessage(
        `This is a ${tone.toLowerCase()} response to your message: "${message}"\n\nDear recipient,\n\nThank you for your message. This is a sample response that would be generated by the AI assistant, maintaining a ${tone.toLowerCase()} tone throughout the communication.\n\nBest regards,\nAI Assistant`
      );
      toast.success("Email generated successfully!");
    }, 1000);
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(generatedMessage);
    toast.success("Copied to clipboard!");
  };

  const handleTryAgain = () => {
    setGeneratedMessage("");
    setMessage("");
    setTone("Professional");
  };

  return (
    <section id="email-composer" className="max-w-4xl mx-auto px-4 py-24 animate-fade-up">
      <h2 className="text-3xl md:text-4xl font-bold text-center mb-12">
        Try It Yourself
      </h2>
      <div className="glass-card rounded-2xl p-6 md:p-8 space-y-6">
        <div className="space-y-4">
          <Textarea
            placeholder="Enter your email message here..."
            className="min-h-[200px] resize-none"
            value={message}
            onChange={(e) => setMessage(e.target.value)}
          />
          <div className="flex flex-col sm:flex-row gap-4">
            <Select value={tone} onValueChange={setTone}>
              <SelectTrigger className="w-full sm:w-[200px]">
                <SelectValue placeholder="Select tone" />
              </SelectTrigger>
              <SelectContent>
                {tones.map((t) => (
                  <SelectItem key={t} value={t}>
                    {t}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
            <Button
              className="button-gradient flex-1"
              onClick={handleGenerate}
              disabled={!message}
            >
              Generate Response
            </Button>
          </div>
        </div>

        {generatedMessage && (
          <div className="space-y-4 animate-slide-up-fade">
            <div className="bg-secondary rounded-xl p-4">
              <pre className="whitespace-pre-wrap font-sans">
                {generatedMessage}
              </pre>
            </div>
            <div className="flex flex-col sm:flex-row gap-4">
              <Button variant="outline" className="flex-1" onClick={handleCopy}>
                <Copy className="mr-2 h-4 w-4" />
                Copy to Clipboard
              </Button>
              <Button
                variant="outline"
                className="flex-1"
                onClick={handleTryAgain}
              >
                <RefreshCw className="mr-2 h-4 w-4" />
                Try Again
              </Button>
            </div>
          </div>
        )}
      </div>
    </section>
  );
};